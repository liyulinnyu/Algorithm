题目描述：
火车从A方向驶入车站，再从B方向驶出车站，同时它的车厢可以进行某种形式的重新组合。假设从A方向驶来的火车有n节车厢，分别按顺序编号为1,2...n。假定在进入车展之前每节车厢之间是不连着的，并且可以自由移动，直到处在B方向的铁轨上。另外嘉定车站C里可以停放任意多节车厢。但是一旦当一节车厢进入车站C，他就不能再回到A方向的铁轨上了，并且一旦当它进入B方向的铁轨后，也不能回到C。负责车站调度的人员需要知道能否使他以a1,a2,...an的顺序从B方向驶出，请写程序判断能否得到指定的车厢顺序。


本题直接用STL 的栈stack就可以实现，思路很简单，但因为数组和栈的判断空问题有些纠结，直到30+分钟才AC，是这道题的遗憾，不过加了些灵活的判断标准，已经超越题目要求，应该还算满意。时间复杂度O(n).


源代码：

#include<iostream>
#include<string>
#include<algorithm>
#include<stack>
#include<vector>
using namespace std;

int main()
{
	
	int carnumber;
	cout << "输入车厢总数： ";
	cin >> carnumber;
    
	vector<int> A(carnumber);
	vector<int> B(carnumber);
	vector<int> temp(carnumber);	
    stack <int> C;
	
    cout << "输入每节车厢的编号： ";
	for(int i = 0; i < carnumber ; i++ )
	    cin >> A[i];

	cout << "输入要得到的编号： ";
	for(int i = 0; i < carnumber; i++)
		cin >> temp[i];

	int j,k;
	for(int j = k = 0; j < carnumber;)
	{
	    if(temp[j] == A[k])
		{
		    B[j] = A[k];
			cout << "111" << endl;
			if(k != carnumber - 1)
			    k++;

			if(j != carnumber)
			    j++;
		}
		else if(!C.empty() && temp[j] == C.top())
		{
			cout << "222" << endl;
			B[j] = C.top();
			C.pop();
			if(j != carnumber)
			    j++;
		}
		else if(k != carnumber - 1)
		{
			C.push(A[k]);
			if(k != carnumber - 1)
			    k++;
		}
		else if(k == carnumber - 1 && temp[j] != C.top())
			break;
		
	}

	for(int i = 0 ; i < carnumber; i++)
		cout << B[i] << " ";
	cout << endl;

	if(!C.empty() || k != carnumber)
	{
	    cout << "无解" << endl;
		return 1;
	}

	cout << "调度成功，编号为： ";
	

}