【题目描述】在一水平路边，有n(2<=n<=25)各钓鱼湖，从左到右编号为1、2、……、n。约翰有H（1<=H<=16）个小时的空余时间，他希望用这些时间钓到尽量多的鱼。他从湖1出发，向右走，有选择的在一些湖边停留一定的时间钓鱼，最后在某一个湖边结束。约翰测出从第i个湖到第i+1个湖需要走5*Ti分钟的路，还测出在第i个湖边停留，第一个5分钟可以钓到鱼Fi，以后再钓5分钟鱼，鱼量减少Di（减少到0后将不再变）。为了简化问题，约翰假定没有其他人钓鱼，也没有其他因素影响他钓到期望数量的鱼。

输入文件fishing.in包含多组测试数据,每组测试数据:
第一行是一个整数n,表示湖的数量
接下来一行是一个整数h,表示john有的空余时间
然后一行是n个整数,两个整数之间用一个空格分隔,这些整数分别表示fi
再下来的一行是n个整数,两个整数之间用一个空格分隔,这些整数分别表示di
再下来的一行是n-1个整数,两个整数之间用一个空格分隔,这些整数分别表示ti
输入文件中,当n=0时表示输入数据结束

输出文件要fishing.out,
对每一组测试数据输出两行数据
第一行,输出n个数据,两数之间用逗号分隔,分别表示John在第1到第n个湖中的钓鱼时间(分钟)
第二行,输出John钓到的最多数量的鱼的数目.格式为  Number of fish expected: 31(:后面留一个空格)
每组测试数据的结果之间用一个空行分隔




题意分析

首先要弄清楚，在我看来是最重要的一句话是，

每个鱼池只经过一次，只能按照从左向右的顺序访问。并不是每个池塘都必须停下来钓鱼。

这句话太重要了，没有这句话，这个题直接就上难度了。

也就是说如果有1，2，3，4个池塘。那么可以选择只钓1，3两个池塘的。2只是路过。

不能按照1，4，2，的顺序来进行钓鱼活动。

算法设计

枚举

我是看了刘汝佳的书，其实我一直没想明白，为什么用贪心，如何用，心里面一直都不清楚。

仔细想了才清楚。因为每次钓鱼只能选择左半段进行活动。那么枚举左半段即可。

第一次枚举：只能在1，池塘里面钓鱼。

第二次枚举：只能在1，2池塘里面钓鱼。

第三次枚举：只能在1，2，3池塘里面钓鱼。

第i次枚举：只能在1,2,3,~~~i池塘里面钓鱼。

直到最后一个池塘。

贪心

对于每一次枚举用贪心算法。由于对于第i次枚举，对于所有的枚举到的池塘(1~i)来说，都是要路过的。并且都是从左至右的方式进行路过。

那么跑路的时间就是恒定的。余下的时间直接用来钓鱼。去掉了跑路的时间，题又简单了一半。

接下来看怎么贪心。

这里有个很大的限制是，钓鱼是必须从左边的池塘向右边的池塘一个接一个地钓鱼。

首先我们想一下如果不是一个接一个地钓鱼会是什么结果。

我们每次都是选择鱼最多的来钓。其实结果都是一样的。

比如

第一次我们选择在1号池塘钓鱼。t1

第二次我们选择在2号池塘钓鱼。t2

第三次我们又选择在1号池塘钓鱼。t3

与

第一次我们在1号池塘钓鱼用了t1+t3时间

第二次我们走到2号池塘钓鱼用了t2时间。

效果是一样的。钓鱼的数量是一样的。

所以贪心的策略就是每次钓鱼的时候选择鱼最多的来钓鱼。（这里可以用一个最大堆来做）

限制条件

如果两个池塘的鱼一样多。那么选择最左边的鱼塘来钓鱼（人毕竟是懒的，能不走路，谁TMD走来走去啊）。这个也比较好弄。直接在class lake的大小比较中加入ID号则可。

这里看到网上有很多人对于为什么当鱼减少至负数之后，要设置为0不理解。

这里分析一下原因。

如果减少为负数不置为0。那么假设所有的鱼塘的鱼都被最后一次钓鱼钓鱼成了负数。

比如

-4, -3, -2 -1 0

这时候如果还是按照少原则来进行选择，那么会选择最后一个池塘来进行停留。

但是实际上每个池塘的鱼都是0.

所以应该选择第一号池塘进行停留。





源代码虽然长，但是复杂度仍保持在O(k*n^2)   如果加入堆可变成O(k*nlogn)



#include<iostream>  
#include<cmath>  
#include<algorithm> 
#include<vector>

using namespace std;

int LakeNumber = 0;
int HaveHour = 0;

int WalkTime = 0; //走的时间
int CountFishing = 0; //钓鱼时间

struct Fish
{
	int number;
	bool isFirst;
};


int main()
{
	int temptime = 0;
	int sum = 0;           //总鱼数

	cout << "输入湖泊数(2~25)： ";
	cin >> LakeNumber;
	while(LakeNumber < 2 || LakeNumber > 25)
	{
	    cout << "越界，请重输： ";
		cin >> LakeNumber;
	}

	vector<Fish> FishNum(LakeNumber);
	cout << "分别输入" << LakeNumber << "个湖泊有的鱼数：" << endl;
	for(int i = 0; i < LakeNumber ; i++)
	{
		cin >> FishNum[i].number;
		if(FishNum[i].number < 0)
			FishNum[i].number = 0;           //不会出现负数的鱼数
	}

	vector<int> FirstFishing(LakeNumber);   //第一次钓鱼的数量
	cout << "分别输入" << LakeNumber << "个湖泊第一次钓鱼的所得的鱼数：" << endl;
	for(int i = 0; i < LakeNumber ; i++)
	{
		cin >> FirstFishing[i];
		if(FirstFishing[i] < 0)
			FirstFishing[i] = 0;           //不会出现负数的鱼数
	}

	vector<int> DeclineFishing(LakeNumber);     //之后减少的鱼数
	cout << "分别输入" << LakeNumber << "个湖泊之后每次钓鱼所减少的鱼数：" << endl;

	for(int i = 0; i < LakeNumber ; i++)
	{
		cin >> DeclineFishing[i];
		if(DeclineFishing[i] < 0)
			DeclineFishing[i] = 0;           //不会出现负数的鱼数
	}


	cout << "输入佳佳有的时间(1~16h)： ";
	cin >> HaveHour;
	while(HaveHour < 1 || HaveHour > 16)
	{
	    cout << "越界，请重输： ";
		cin >> HaveHour;
	} 

	cout << "分别输入" << LakeNumber << "个湖泊之间的走的时间(最后要求5*Ti) ： ";
	for(int i = 0;i < LakeNumber; i++)
	{
		cin >> temptime;
		WalkTime += temptime;
		if(WalkTime * 5 >= HaveHour * 60)
		{
		    cout << " 时间过大，请重输一次：";
			i--;
		}
	}
	
	CountFishing = HaveHour * 12 - WalkTime;

	int j = 0,temp = 0,k = 0;


	for(int i = 0; i < LakeNumber; i++)
	{
		FishNum[i].isFirst = true;                            //将所有湖泊初始化为没有钓过鱼
	}


	for(int i = 0; i < CountFishing ; i++)
	{
		if(FishNum[0].isFirst == true)
		{
		    if(FishNum[0].number >= FirstFishing[0])
				temp = FirstFishing[0];
			else
				temp = FishNum[0].number;
		}
		else
		{
			if(FishNum[0].number >= (FirstFishing[0] - DeclineFishing[0]))
				temp = (FirstFishing[0] - DeclineFishing[0]);
			else
				temp = FishNum[0].number;
		}

		k = 0;

		for(j = 1; j < LakeNumber ; j++)
		{
			/*
			if(FishNum[j].number > temp)
			{
				k = j;
				temp = FishNum[j].number;
			}
			*/

			if(FishNum[j].isFirst == true)
			{
				if(FishNum[j].number >= FirstFishing[j])
				{
				    if(FirstFishing[j] > temp)
			        {
				        k = j;
				        temp = FirstFishing[j];
			        }
				}
				else
				{
					if(FishNum[j].number > temp)
					{
						k = j;
						temp = FishNum[j].number;
					}
				}
			}
			else
			{
				if(FishNum[j].number >= (FirstFishing[j] - DeclineFishing[j]))
				{
				    if((FirstFishing[j] - DeclineFishing[j]) > temp)
			        {
				        k = j;
				        temp = (FirstFishing[j] - DeclineFishing[j]);
			        }
				}
				else
				{
					if(FishNum[j].number > temp)
					{
						k = j;
						temp = FishNum[j].number;
					}
				}
			}


		}
		cout << "在" << k+1 << "号湖泊钓鱼1次" << endl;
		
		if(FishNum[k].isFirst == true)
		{
			if(FishNum[k].number < FirstFishing[k])
			{
				sum += FishNum[k].number;
				FishNum[k].number = 0;
			}
			else
			{
      			FishNum[k].number = FishNum[k].number - FirstFishing[k];              //第一次在k湖泊钓完鱼后的剩余量
			    sum += FirstFishing[k];
			}
		}
		else
		{
			if(FishNum[k].number < (FirstFishing[k] - DeclineFishing[k]))
			{
			    sum += FishNum[k].number;
				FishNum[k].number = 0;
			}
			else
			{
			    FishNum[k].number -= (FirstFishing[k] - DeclineFishing[k]);  
			    sum += (FirstFishing[k] - DeclineFishing[k]);
			}
		}
		
		
		if(FishNum[k].number < 0)                             //不能小于0
				FishNum[k].number = 0;
		FishNum[k].isFirst = false;
	}


	for(int m = 0; m < LakeNumber; m++)
		cout << FishNum[m].number << " ";
	cout << endl;

	cout << sum << endl;

	return 0;
}